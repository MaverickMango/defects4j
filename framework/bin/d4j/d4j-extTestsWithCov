use strict;
use warnings;

use Constants;
use Utils;
use Project;
use Coverage;
use Getopt::Std;

my %cmd_opts;
getopts('t:w:s:o:i:', \%cmd_opts);

my $WORK_DIR    = Utils::get_abs_path($cmd_opts{w} // ".");
my $TEST_SUITE  = $cmd_opts{t};
my $SINGLE_TEST = $cmd_opts{s};
my $FAILING_OUTPUT = $cmd_opts{o};
my $INCLUDE;
if ($cmd_opts{i}) {
    $INCLUDE = $cmd_opts{i};
}


my $config = Utils::read_config_file("$WORK_DIR/$CONFIG");
unless(defined $config) {
    print(STDERR "$WORK_DIR is not a valid working directory!\n");
    exit 1;
}
my $pid = $config->{$CONFIG_PID};
my $vid = $config->{$CONFIG_VID};
my $bid = Utils::check_vid($vid)->{bid};

# Instantiate project and set working directory
my $project = Project::create_project($pid);
$project->{prog_root} = $WORK_DIR;

my $src_dir = $project->src_dir($vid);
# Classes to instrument for coverage analysis -- default is all modified classes
my $classes = "$SCRIPT_DIR/projects/$pid/modified_classes/$bid.src";

# Clean temporary files that hold test results
my $fail_tests = "$WORK_DIR/$FILE_FAILING_TESTS";
Utils::clean_test_results($WORK_DIR);

# Run the test suite, according to the provided flags
my $cov_results;
if (defined $TEST_SUITE) {
    # Compile and run external test suite
    $project->compile_ext_tests($TEST_SUITE) or die "Cannot compile external test suite!";
    $cov_results = Coverage::coverage_ext($project, $classes, $src_dir, $TEST_SUITE, $INCLUDE, $FAILING_OUTPUT, $SINGLE_TEST);
}
defined $cov_results or die "Couldn't obtain coverage results!";

open(CSV, ">$WORK_DIR/summary.csv") or die "Cannot write output csv file $!";
print(CSV "LinesTotal,LinesCovered,ConditionsTotal,ConditionsCovered\n");
printf(CSV "%d,%d,%d,%d\n",
        $cov_results->{lines_total},
        $cov_results->{lines_covered},
        $cov_results->{branches_total},
        $cov_results->{branches_covered});
close(CSV);

printf("%18s: %d\n",     "Lines total",        $cov_results->{lines_total});
printf("%18s: %d\n",     "Lines covered",      $cov_results->{lines_covered});
printf("%18s: %d\n",     "Conditions total",   $cov_results->{branches_total});
printf("%18s: %d\n",     "Conditions covered", $cov_results->{branches_covered});
printf("%18s: %.1f%%\n", "Line coverage",      $cov_results->{lines_covered}/$cov_results->{lines_total}*100);
printf("%18s: %.1f%%\n", "Condition coverage", ($cov_results->{branches_total} == 0 ? 0 : $cov_results->{branches_covered}/$cov_results->{branches_total}*100));
#printf("%17s: %.1f seconds\n", "Total run time", ($timeAnalysis));

# Issue a warning if any test failed as this might give misleading results
Utils::has_failing_tests($fail_tests)
        and print(STDERR "WARNING: Some tests failed (see $fail_tests)!\n");

1;
