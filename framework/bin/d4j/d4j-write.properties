#!/usr/bin/perl
use strict;
use warnings FATAL => 'all';

use FindBin qw($Bin);
use File::Basename;
use Cwd qw(abs_path);
use Getopt::Std;

use lib abs_path("$Bin/../core");
use Constants;
use Utils;
use Project;
use File::Find;
use XML::Simple;
use Data::Dumper;

#
# Issue usage message and quit
#
sub _usage {
    print "usage: $0 -p project_id -v version_id -w work_dir\n";
    exit 1;
}

my %cmd_opts;
getopts('p:v:w:', \%cmd_opts) or _usage();

my $PID = $cmd_opts{p};
my $VID = $cmd_opts{v};
my $WORK_DIR = Utils::get_abs_path($cmd_opts{w});
my $project = Project::create_project($PID);

$project->{prog_root} = $WORK_DIR;
# print("$PID\_$VID\n");
# printf("%s\n%s\n",$project->src_dir($VID),$project->test_dir($VID));

my %versions = find_compile_source($WORK_DIR);
print_result($WORK_DIR, $versions{source}, $versions{target});

my $SRCDIR = $project->src_dir($VID);
my $TESTDIR = $project->test_dir($VID);
my $config = {
    $CONFIG_PID => $PID,
    $CONFIG_VID => ${VID}, 
    "d4j.dir.src.classes" => $SRCDIR, 
    "d4j.dir.src.tests" => $TESTDIR, 
    "compile.source" => $versions{source},
    "compile.target" => $versions{target}
};
# write config
Utils::write_config_file("$WORK_DIR/$CONFIG", $config);
# write properties
$project->_write_props($VID, 0);

sub find_compile_source {
    @_ == 1 or die $ARG_ERROR;
    my ($work_dir) = @_;
    my $dir = $work_dir;
    my @target_files = qw(build.xml maven-build.xml pom.xml default.properties maven.properties maven-build.properties build.properties);
    my %versions;
    # 遍历当前目录下的文件
    opendir(my $dh, $dir) or die "无法打开目录 $dir: $!";
    while (my $file = readdir($dh)) {
        next unless -f "$dir/$file";  # 只处理普通文件
        next unless grep { $file eq $_ } @target_files;  # 匹配目标文件名

        # print "检查文件: $file\n";
        if ($file =~ /\.properties$/) {
            %versions =  parse_properties_file("$dir/$file");
        }
        if (%versions && $versions{source} eq 'null' && $versions{target} eq 'null') {
            if ($file =~ /\.xml$/) {
                %versions = parse_xml_file("$dir/$file");
            }
        }
    }
    closedir($dh);
    return wantarray ? %versions : \%versions;
}

sub parse_xml_file {
    my ($file) = @_;
    my $xml = eval { 
        XMLin(
            $file,
            ForceArray => ['target', 'property','*'],
            KeyAttr => [],
            SuppressEmpty => 1
        ) 
    };
    if ($@) {
        warn "XML 解析错误: $@";
        return;
    }
    
    # Ant 的 build.xml（查找 javac 的 source/target）
    if ($file =~ /build\.xml$/) {
        #查找property属性是否定义了编译版本
        my %global_props;
        if (ref($xml->{property})) {
            foreach my $prop (@{ $xml->{property} }) {
                my $name = $prop->{name} || '';
                my $value = $prop->{value} || '';
                if ($name =~ /javac\.source/i) {
                    $global_props{source} = $value;
                } elsif ($name =~ /javac\.target/i) {
                    $global_props{target} = $value;
                }
            }
        }
        my %versions = (source => 'null', target => 'null');
        if (defined $global_props{source} || defined $global_props{target}) {
            $versions{source} = $global_props{source};
            $versions{target} = $global_props{target};
        } else {
            # 如果property中没有定义再查找javac节点
            my @javac_nodes = find_javac_nodes($xml);
            my ($source, $target);
            eval {
                foreach my $node (@javac_nodes) {
                    $source = $node->{source} || $node->{'@source'};
                    $target = $node->{target} || $node->{'@target'};
                }
            };
            # print_result($file, $source, $target);
            $versions{source} = $source if $source;
            $versions{target} = $target if $target;
        }
        return wantarray ? %versions : \%versions;
    }
    # Maven 的 pom.xml（查找 maven-compiler-plugin 配置）
    elsif ($file =~ /pom\.xml$/) {
        my ($source, $target);
        eval {
            $source = $xml->{build}[0]{plugins}[0]{plugin}
                ->[0]{configuration}[0]{source}[0];
            $target = $xml->{build}[0]{plugins}[0]{plugin}
                ->[0]{configuration}[0]{target}[0];
        };
        my %versions = (
            source => $source || 'null',
            target => $target || 'null'
        );
        return wantarray ? %versions : \%versions;
        # print_result($file, $source, $target);
    }
}

# 递归查找 Ant 的 javac 节点
sub find_javac_nodes {
    my ($xml_root) = @_;
    my @javac_nodes;

    # 遍历所有 target 节点
    if (ref($xml_root->{target})) {
        foreach my $target (@{ $xml_root->{target} }) {
            if ($target->{name} =~ /compile/i) {
                # 遍历 target 下的所有任务
                # print Dumper($target), "\n";
                if (exists $target->{javac}) {
                    my $task = $target->{javac};
                    push @javac_nodes, $task;
                }
            }
        }
    }
    return @javac_nodes;
}

# 解析 properties 文件
sub parse_properties_file {
    my ($file) = @_;
    open my $fh, '<', $file or die "无法打开文件 $file: $!";
    my ($source, $target);
    while (<$fh>) {
        chomp;
        next if /^\s*#/;  # 忽略注释
        if (/.*compile\.source\s*=\s*(\d+\.\d+)/) {
            $source = $1;
        } elsif (/.*compile\.target\s*=\s*(\d+\.\d+)/) {
            $target = $1;
        }
    }
    close $fh;
    # print_result($file, $source, $target);
    my %versions = (
        source => $source || 'null',
        target => $target || 'null'
    );
    return wantarray ? %versions : \%versions;
}

# 打印结果
sub print_result {
    my ($file, $source, $target) = @_;
    print "文件: $file\n";
    print "  Source 版本: ", ($source || "未找到"), "\n";
    print "  Target 版本: ", ($target || "未找到"), "\n";
    print "-" x 50, "\n";
}